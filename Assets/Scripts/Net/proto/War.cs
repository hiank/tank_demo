// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: war/proto/war.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WarPb {

  /// <summary>Holder for reflection information generated from war/proto/war.proto</summary>
  public static partial class WarReflection {

    #region Descriptor
    /// <summary>File descriptor for war/proto/war.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN3YXIvcHJvdG8vd2FyLnByb3RvEgZ3YXJfcGIaGWdvb2dsZS9wcm90b2J1",
            "Zi9hbnkucHJvdG8aDG1hc3Rlci5wcm90byIsCgpTX1dhcl9XYW50Eh4KBHR5",
            "cGUYASABKA4yEC53YXJfcGIuV2FyX1R5cGUiPAoIU19XYXJfRG8SCgoCaWQY",
            "ASABKAQSJAoGYWN0aW9uGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSIm",
            "CgRUZWFtEh4KBXJvbGVzGAEgAygLMg8ubWFzdGVyX3BiLlJvbGUiRAoJV2Fy",
            "X01hdGNoEgoKAmlkGAEgASgEEg0KBW1hcElkGAIgASgFEhwKBmxlYWd1ZRgD",
            "IAMoCzIMLndhcl9wYi5UZWFtIjwKBFRpY2sSDQoFaW5kZXgYASABKAUSJQoH",
            "YWN0aW9ucxgCIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkiMQoORGVjaW1h",
            "bFZlY3RvcjMSCQoBeBgBIAEoCRIJCgF5GAIgASgJEgkKAXoYAyABKAkiOgoE",
            "TW92ZRILCgN1aWQYASABKAQSJQoFc3BlZWQYAiABKAsyFi53YXJfcGIuRGVj",
            "aW1hbFZlY3RvcjMiSgoFU2hvb3QSCwoDdWlkGAEgASgEEg0KBXN1cGVyGAIg",
            "ASgIEiUKBXBvaW50GAMgASgLMhYud2FyX3BiLkRlY2ltYWxWZWN0b3IzKksK",
            "CFdhcl9UeXBlEgcKA05JTBAAEgoKBlNPQ0NFUhABEg0KCU9ORVdJTk5FUhAC",
            "Eg4KClRFQU1XSU5ORVIQAxILCgdIVU5USU5HEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::MasterPb.MasterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::WarPb.War_Type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.S_War_Want), global::WarPb.S_War_Want.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.S_War_Do), global::WarPb.S_War_Do.Parser, new[]{ "Id", "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.Team), global::WarPb.Team.Parser, new[]{ "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.War_Match), global::WarPb.War_Match.Parser, new[]{ "Id", "MapId", "League" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.Tick), global::WarPb.Tick.Parser, new[]{ "Index", "Actions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.DecimalVector3), global::WarPb.DecimalVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.Move), global::WarPb.Move.Parser, new[]{ "Uid", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WarPb.Shoot), global::WarPb.Shoot.Parser, new[]{ "Uid", "Super", "Point" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum War_Type {
    /// <summary>
    ///NOTE: 枚举必须从0开始，这个作为站位
    /// </summary>
    [pbr::OriginalName("NIL")] Nil = 0,
    /// <summary>
    ///NOTE: 足球模式
    /// </summary>
    [pbr::OriginalName("SOCCER")] Soccer = 1,
    /// <summary>
    ///NOTE: 单人决胜模式
    /// </summary>
    [pbr::OriginalName("ONEWINNER")] Onewinner = 2,
    /// <summary>
    ///NOTE: 团队决胜模式
    /// </summary>
    [pbr::OriginalName("TEAMWINNER")] Teamwinner = 3,
    /// <summary>
    ///NOTE: 猎杀模式[计算标记]
    /// </summary>
    [pbr::OriginalName("HUNTING")] Hunting = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///S_War_Want 想要战斗
  /// </summary>
  public sealed partial class S_War_Want : pb::IMessage<S_War_Want> {
    private static readonly pb::MessageParser<S_War_Want> _parser = new pb::MessageParser<S_War_Want>(() => new S_War_Want());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_War_Want> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_War_Want() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_War_Want(S_War_Want other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_War_Want Clone() {
      return new S_War_Want(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::WarPb.War_Type type_ = 0;
    /// <summary>
    ///NOTE: 战斗类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WarPb.War_Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_War_Want);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_War_Want other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_War_Want other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::WarPb.War_Type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///S_War_Do 执行操作
  /// </summary>
  public sealed partial class S_War_Do : pb::IMessage<S_War_Do> {
    private static readonly pb::MessageParser<S_War_Do> _parser = new pb::MessageParser<S_War_Do>(() => new S_War_Do());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_War_Do> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_War_Do() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_War_Do(S_War_Do other) : this() {
      id_ = other.id_;
      action_ = other.action_ != null ? other.action_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_War_Do Clone() {
      return new S_War_Do(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///NOTE: id，包含各种战场id信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any action_;
    /// <summary>
    ///NOTE: 玩家每次有效操作都立即上传服务器，所以动作不再是数组形式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_War_Do);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_War_Do other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Action, other.Action)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (action_ != null) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (action_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_War_Do other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.action_ != null) {
        if (action_ == null) {
          Action = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Action.MergeFrom(other.Action);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (action_ == null) {
              Action = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Action);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Team : pb::IMessage<Team> {
    private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Team> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team(Team other) : this() {
      roles_ = other.roles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team Clone() {
      return new Team(this);
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MasterPb.Role> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::MasterPb.Role.Parser);
    private readonly pbc::RepeatedField<global::MasterPb.Role> roles_ = new pbc::RepeatedField<global::MasterPb.Role>();
    /// <summary>
    ///NOTE: 每个队伍由多个模型组成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MasterPb.Role> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Team);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Team other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roles_.Equals(other.roles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Team other) {
      if (other == null) {
        return;
      }
      roles_.Add(other.roles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class War_Match : pb::IMessage<War_Match> {
    private static readonly pb::MessageParser<War_Match> _parser = new pb::MessageParser<War_Match>(() => new War_Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<War_Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public War_Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public War_Match(War_Match other) : this() {
      id_ = other.id_;
      mapId_ = other.mapId_;
      league_ = other.league_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public War_Match Clone() {
      return new War_Match(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///NOTE: 玩家在战场中的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 2;
    private int mapId_;
    /// <summary>
    ///NOTE: 地图id，用于获得战场信息[前端需要，后端已经记录在arena中了]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "league" field.</summary>
    public const int LeagueFieldNumber = 3;
    private static readonly pb::FieldCodec<global::WarPb.Team> _repeated_league_codec
        = pb::FieldCodec.ForMessage(26, global::WarPb.Team.Parser);
    private readonly pbc::RepeatedField<global::WarPb.Team> league_ = new pbc::RepeatedField<global::WarPb.Team>();
    /// <summary>
    ///NOTE: 联盟，由多个队伍组成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WarPb.Team> League {
      get { return league_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as War_Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(War_Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MapId != other.MapId) return false;
      if(!league_.Equals(other.league_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      hash ^= league_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapId);
      }
      league_.WriteTo(output, _repeated_league_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      size += league_.CalculateSize(_repeated_league_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(War_Match other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      league_.Add(other.league_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            MapId = input.ReadInt32();
            break;
          }
          case 26: {
            league_.AddEntriesFrom(input, _repeated_league_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Tick 服务器定期下发，用于同步表现
  /// </summary>
  public sealed partial class Tick : pb::IMessage<Tick> {
    private static readonly pb::MessageParser<Tick> _parser = new pb::MessageParser<Tick>(() => new Tick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick(Tick other) : this() {
      index_ = other.index_;
      actions_ = other.actions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick Clone() {
      return new Tick(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///NOTE: 给Tick编号，用于区别帧顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Any> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> actions_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    ///NOTE: 战斗信息变化, 根据收到操作指令的先后
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if(!actions_.Equals(other.actions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tick other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      actions_.Add(other.actions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///DecimalVector3 向量数据结构
  /// </summary>
  public sealed partial class DecimalVector3 : pb::IMessage<DecimalVector3> {
    private static readonly pb::MessageParser<DecimalVector3> _parser = new pb::MessageParser<DecimalVector3>(() => new DecimalVector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecimalVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecimalVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecimalVector3(DecimalVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecimalVector3 Clone() {
      return new DecimalVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private string x_ = "";
    /// <summary>
    ///NOTE: x向量，decimal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string X {
      get { return x_; }
      set {
        x_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private string y_ = "";
    /// <summary>
    ///NOTE: y向量，decimal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Y {
      get { return y_; }
      set {
        y_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private string z_ = "";
    /// <summary>
    ///NOTE: z向量，decimal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Z {
      get { return z_; }
      set {
        z_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecimalVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecimalVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X.Length != 0) hash ^= X.GetHashCode();
      if (Y.Length != 0) hash ^= Y.GetHashCode();
      if (Z.Length != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(X);
      }
      if (Y.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Y);
      }
      if (Z.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(X);
      }
      if (Y.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Y);
      }
      if (Z.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecimalVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X.Length != 0) {
        X = other.X;
      }
      if (other.Y.Length != 0) {
        Y = other.Y;
      }
      if (other.Z.Length != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            X = input.ReadString();
            break;
          }
          case 18: {
            Y = input.ReadString();
            break;
          }
          case 26: {
            Z = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Move 移动操作，记录当前tick中移动属性
  /// </summary>
  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      uid_ = other.uid_;
      speed_ = other.speed_ != null ? other.speed_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    /// <summary>
    ///NOTE: 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private global::WarPb.DecimalVector3 speed_;
    /// <summary>
    ///NOTE: 各方向上的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WarPb.DecimalVector3 Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (speed_ != null) hash ^= Speed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (speed_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          Speed = new global::WarPb.DecimalVector3();
        }
        Speed.MergeFrom(other.Speed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (speed_ == null) {
              Speed = new global::WarPb.DecimalVector3();
            }
            input.ReadMessage(Speed);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Shoot 射击操作
  /// </summary>
  public sealed partial class Shoot : pb::IMessage<Shoot> {
    private static readonly pb::MessageParser<Shoot> _parser = new pb::MessageParser<Shoot>(() => new Shoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WarPb.WarReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shoot(Shoot other) : this() {
      uid_ = other.uid_;
      super_ = other.super_;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shoot Clone() {
      return new Shoot(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    /// <summary>
    ///NOTE: 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "super" field.</summary>
    public const int SuperFieldNumber = 2;
    private bool super_;
    /// <summary>
    ///NOTE: 是否是大招
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Super {
      get { return super_; }
      set {
        super_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private global::WarPb.DecimalVector3 point_;
    /// <summary>
    ///NOTE: 点击的plane上的点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WarPb.DecimalVector3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Super != other.Super) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Super != false) hash ^= Super.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (Super != false) {
        output.WriteRawTag(16);
        output.WriteBool(Super);
      }
      if (point_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Super != false) {
        size += 1 + 1;
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shoot other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Super != false) {
        Super = other.Super;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::WarPb.DecimalVector3();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 16: {
            Super = input.ReadBool();
            break;
          }
          case 26: {
            if (point_ == null) {
              Point = new global::WarPb.DecimalVector3();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
